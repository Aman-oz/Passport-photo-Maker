<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ots/aipassportphotomaker/presentation/ui/home/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ots/aipassportphotomaker/presentation/ui/home/HomeScreen.kt" />
              <option name="originalContent" value="package com.ots.aipassportphotomaker.presentation.ui.home&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyGridState&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.rememberLazyGridState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.ots.aipassportphotomaker.common.ext.collectAsEffect&#10;import com.ots.aipassportphotomaker.common.preview.PreviewContainer&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Page&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarSharedViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.components.LoaderFullScreen&#10;import com.ots.aipassportphotomaker.presentation.ui.main.MainRouter&#10;import com.ots.aipassportphotomaker.presentation.ui.theme.colors&#10;&#10;@Composable&#10;fun HomePage(&#10;    mainRouter: MainRouter,&#10;    viewModel: HomeScreenViewModel = hiltViewModel(),&#10;    sharedViewModel: NavigationBarSharedViewModel,&#10;) {&#10;    val TAG = &quot;HomePage&quot;&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val lazyGridState = rememberLazyGridState()&#10;&#10;    viewModel.navigationState.collectAsEffect { navigationState -&gt;&#10;        Log.d(TAG, &quot;HomePage: Navigation State: $navigationState&quot;)&#10;        when (navigationState) {&#10;            is HomeScreenNavigationState.PhotoID -&gt; mainRouter.navigateToPhotoIDDetailScreen(navigationState.name)&#10;        }&#10;    }&#10;    viewModel.refreshListState.collectAsEffect {&#10;//        moviesPaging.refresh()&#10;    }&#10;&#10;    sharedViewModel.bottomItem.collectAsEffect {&#10;        // log the item that was clicked&#10;        Log.d(TAG, &quot;HomePage: Clicked on item: ${it.page}&quot;)&#10;        if (it.page == Page.Home) {&#10;            lazyGridState.animateScrollToItem(0)&#10;        }&#10;    }&#10;&#10;    HomeScreen(&#10;        uiState = uiState,&#10;        lazyGridState = lazyGridState,&#10;        onItemClick = { name -&gt;&#10;            if (name == &quot;PhotoID&quot;) {&#10;                // Set bottom bar to PhotoID (CreateID) and navigate&#10;                sharedViewModel.onBottomItemClicked(&#10;                    BottomNavigationBarItem.CreateID&#10;                )&#10;                viewModel.onItemClick(name)&#10;            } else {&#10;                viewModel.onItemClick(name)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun HomeScreen(&#10;    uiState: HomeScreenUiState,&#10;    lazyGridState: LazyGridState,&#10;    onItemClick: (name: String) -&gt; Unit&#10;) {&#10;    Surface {&#10;        if (uiState.showLoading) {&#10;            LoaderFullScreen()&#10;        } else {&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(2),&#10;                state = lazyGridState,&#10;                modifier = Modifier&#10;                    .background(colors.background)&#10;            ) {&#10;                val itemsList = mainItems&#10;                items(itemsList.size) { index -&gt;&#10;                    val item = itemsList[index]&#10;                    HomeCardItem(&#10;                        title = item.title,&#10;                        description = item.description,&#10;                        backgroundColor = item.backgroundColor,&#10;                        textColor = item.textColor,&#10;                        backgroundImage = item.backgroundImage,&#10;                        sparkleImage = item.sparkleImage,&#10;                        onClick = { onItemClick(item.name) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;@Preview(showSystemUi = true, device = &quot;id:pixel_5&quot;)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    val uiState = HomeScreenUiState(showLoading = false)&#10;    val lazyGridState = LazyGridState()&#10;    PreviewContainer {&#10;        HomeScreen(uiState, lazyGridState) { name -&gt;&#10;            // Handle item click&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ots.aipassportphotomaker.presentation.ui.home&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyGridState&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.rememberLazyGridState&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import com.ots.aipassportphotomaker.common.ext.collectAsEffect&#10;import com.ots.aipassportphotomaker.common.preview.PreviewContainer&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Page&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarSharedViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.components.LoaderFullScreen&#10;import com.ots.aipassportphotomaker.presentation.ui.main.MainRouter&#10;import com.ots.aipassportphotomaker.presentation.ui.theme.colors&#10;&#10;@Composable&#10;fun HomePage(&#10;    nestedNavController: NavHostController,&#10;    viewModel: HomeScreenViewModel = hiltViewModel(),&#10;    sharedViewModel: NavigationBarSharedViewModel,&#10;) {&#10;    val TAG = &quot;HomePage&quot;&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val lazyGridState = rememberLazyGridState()&#10;&#10;    viewModel.navigationState.collectAsEffect { navigationState -&gt;&#10;        Log.d(TAG, &quot;HomePage: Navigation State: $navigationState&quot;)&#10;        when (navigationState) {&#10;            is HomeScreenNavigationState.PhotoID -&gt; {&#10;                // Use nestedNavController to navigate within the NavHost&#10;                nestedNavController.navigate(com.ots.aipassportphotomaker.domain.bottom_nav.Page.PhotoID)&#10;            }&#10;        }&#10;    }&#10;    viewModel.refreshListState.collectAsEffect {&#10;//        moviesPaging.refresh()&#10;    }&#10;&#10;    sharedViewModel.bottomItem.collectAsEffect {&#10;        // log the item that was clicked&#10;        Log.d(TAG, &quot;HomePage: Clicked on item: ${it.page}&quot;)&#10;        if (it.page == Page.Home) {&#10;            lazyGridState.animateScrollToItem(0)&#10;        }&#10;    }&#10;&#10;    HomeScreen(&#10;        uiState = uiState,&#10;        lazyGridState = lazyGridState,&#10;        onItemClick = { name -&gt;&#10;            if (name == &quot;PhotoID&quot;) {&#10;                // Set bottom bar to PhotoID (CreateID) and navigate&#10;                sharedViewModel.onBottomItemClicked(&#10;                    BottomNavigationBarItem.CreateID&#10;                )&#10;                viewModel.onItemClick(name)&#10;            } else {&#10;                viewModel.onItemClick(name)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun HomeScreen(&#10;    uiState: HomeScreenUiState,&#10;    lazyGridState: LazyGridState,&#10;    onItemClick: (name: String) -&gt; Unit&#10;) {&#10;    Surface {&#10;        if (uiState.showLoading) {&#10;            LoaderFullScreen()&#10;        } else {&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Fixed(2),&#10;                state = lazyGridState,&#10;                modifier = Modifier&#10;                    .background(colors.background)&#10;            ) {&#10;                val itemsList = mainItems&#10;                items(itemsList.size) { index -&gt;&#10;                    val item = itemsList[index]&#10;                    HomeCardItem(&#10;                        title = item.title,&#10;                        description = item.description,&#10;                        backgroundColor = item.backgroundColor,&#10;                        textColor = item.textColor,&#10;                        backgroundImage = item.backgroundImage,&#10;                        sparkleImage = item.sparkleImage,&#10;                        onClick = { onItemClick(item.name) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;@Preview(showSystemUi = true, device = &quot;id:pixel_5&quot;)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    val uiState = HomeScreenUiState(showLoading = false)&#10;    val lazyGridState = LazyGridState()&#10;    PreviewContainer {&#10;        HomeScreen(uiState, lazyGridState) { name -&gt;&#10;            // Handle item click&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/ots/aipassportphotomaker/presentation/ui/main/MainGraph.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/ots/aipassportphotomaker/presentation/ui/main/MainGraph.kt" />
              <option name="originalContent" value="package com.ots.aipassportphotomaker.presentation.ui.main&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.rememberNavController&#10;import com.ots.aipassportphotomaker.common.ext.composableHorizontalSlide&#10;import com.ots.aipassportphotomaker.common.ext.sharedViewModel&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Graph&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Page&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarScreen&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarSharedViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.createid.PhotoIDPage&#10;import com.ots.aipassportphotomaker.presentation.ui.createid.PhotoIDScreenViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.home.HomePage&#10;import com.ots.aipassportphotomaker.presentation.ui.home.HomeScreenViewModel&#10;&#10;// Created by amanullah on 25/07/2025.&#10;// Copyright (c) 2025 Ozi Publishing. All rights reserved.&#10;&#10;@Composable&#10;fun MainGraph(&#10;    mainNavController: NavHostController,&#10;    darkMode: Boolean,&#10;    onThemeUpdated: () -&gt; Unit&#10;) {&#10;    NavHost(&#10;        navController = mainNavController,&#10;        startDestination = Page.NavigationBar,&#10;        route = Graph.Main::class&#10;    ) {&#10;        composableHorizontalSlide&lt;Page.NavigationBar&gt; { backStack -&gt;&#10;            val nestedNavController = rememberNavController()&#10;            NavigationBarScreen(&#10;                sharedViewModel = backStack.sharedViewModel(navController = mainNavController),&#10;                mainRouter = MainRouter(mainNavController),&#10;                darkMode = darkMode,&#10;                onThemeUpdated = onThemeUpdated,&#10;                nestedNavController = nestedNavController&#10;            ) {&#10;                NavigationBarNestedGraph(&#10;                    navController = nestedNavController,&#10;                    mainNavController = mainNavController,&#10;                    parentRoute = Graph.Main::class&#10;                )&#10;            }&#10;        }&#10;&#10;        composableHorizontalSlide&lt;Page.Home&gt; {&#10;            val viewModel = hiltViewModel&lt;HomeScreenViewModel&gt;()&#10;            val sharedViewModel = hiltViewModel&lt;NavigationBarSharedViewModel&gt;()&#10;            val mainRouter = MainRouter(mainNavController)&#10;            HomePage(&#10;                mainRouter = mainRouter,&#10;                viewModel = viewModel,&#10;                sharedViewModel = sharedViewModel,&#10;            )&#10;        }&#10;&#10;        composableHorizontalSlide&lt;Page.PhotoID&gt; {&#10;            PhotoIDPage(&#10;                mainRouter = MainRouter(mainNavController),&#10;                viewModel = hiltViewModel&lt;PhotoIDScreenViewModel&gt;(),&#10;                sharedViewModel = hiltViewModel&lt;NavigationBarSharedViewModel&gt;(),&#10;            )&#10;        }&#10;&#10;        /*composableHorizontalSlide&lt;Page.MovieDetails&gt; {&#10;            val viewModel = hiltViewModel&lt;MovieDetailsViewModel&gt;()&#10;            MovieDetailsPage(&#10;                mainNavController = mainNavController,&#10;                viewModel = viewModel,&#10;            )&#10;        }*/&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ots.aipassportphotomaker.presentation.ui.main&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.rememberNavController&#10;import com.ots.aipassportphotomaker.common.ext.composableHorizontalSlide&#10;import com.ots.aipassportphotomaker.common.ext.sharedViewModel&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Graph&#10;import com.ots.aipassportphotomaker.domain.bottom_nav.Page&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarScreen&#10;import com.ots.aipassportphotomaker.presentation.ui.bottom_nav.NavigationBarSharedViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.createid.PhotoIDPage&#10;import com.ots.aipassportphotomaker.presentation.ui.createid.PhotoIDScreenViewModel&#10;import com.ots.aipassportphotomaker.presentation.ui.home.HomePage&#10;import com.ots.aipassportphotomaker.presentation.ui.home.HomeScreenViewModel&#10;&#10;// Created by amanullah on 25/07/2025.&#10;// Copyright (c) 2025 Ozi Publishing. All rights reserved.&#10;&#10;@Composable&#10;fun MainGraph(&#10;    mainNavController: NavHostController,&#10;    darkMode: Boolean,&#10;    onThemeUpdated: () -&gt; Unit&#10;) {&#10;    NavHost(&#10;        navController = mainNavController,&#10;        startDestination = Page.NavigationBar,&#10;        route = Graph.Main::class&#10;    ) {&#10;        composableHorizontalSlide&lt;Page.NavigationBar&gt; { backStack -&gt;&#10;            val nestedNavController = rememberNavController()&#10;            NavigationBarScreen(&#10;                sharedViewModel = backStack.sharedViewModel(navController = mainNavController),&#10;                mainRouter = MainRouter(mainNavController),&#10;                darkMode = darkMode,&#10;                onThemeUpdated = onThemeUpdated,&#10;                nestedNavController = nestedNavController&#10;            ) {&#10;                NavigationBarNestedGraph(&#10;                    navController = nestedNavController,&#10;                    mainNavController = mainNavController,&#10;                    parentRoute = Graph.Main::class&#10;                )&#10;            }&#10;        }&#10;&#10;        composableHorizontalSlide&lt;Page.Home&gt; { backStack -&gt;&#10;            val viewModel = hiltViewModel&lt;HomeScreenViewModel&gt;()&#10;            val sharedViewModel = hiltViewModel&lt;NavigationBarSharedViewModel&gt;()&#10;            // Use the mainNavController as the nestedNavController for this route&#10;            HomePage(&#10;                nestedNavController = mainNavController,&#10;                viewModel = viewModel,&#10;                sharedViewModel = sharedViewModel,&#10;            )&#10;        }&#10;&#10;        composableHorizontalSlide&lt;Page.PhotoID&gt; {&#10;            PhotoIDPage(&#10;                mainRouter = MainRouter(mainNavController),&#10;                viewModel = hiltViewModel&lt;PhotoIDScreenViewModel&gt;(),&#10;                sharedViewModel = hiltViewModel&lt;NavigationBarSharedViewModel&gt;(),&#10;            )&#10;        }&#10;&#10;        /*composableHorizontalSlide&lt;Page.MovieDetails&gt; {&#10;            val viewModel = hiltViewModel&lt;MovieDetailsViewModel&gt;()&#10;            MovieDetailsPage(&#10;                mainNavController = mainNavController,&#10;                viewModel = viewModel,&#10;            )&#10;        }*/&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>